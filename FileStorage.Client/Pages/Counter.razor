@page "/counter"
@using FileStorage.Shared;
@inject HttpClient Http;
@inject IJSRuntime JS

<PageTitle>Files</PageTitle>

<h1>Files</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (files == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in files)
            {
                <tr>
                    <td>@file.UntrustedName</td>
                    <td><button @onclick=@(() => DownloadFile(file.UntrustedName))></button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<FileModelResponse> files = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("api/File/list-files");
        var newFiles = await response.Content.ReadFromJsonAsync<List<FileModelResponse>>();
        if (newFiles != null)
            files = newFiles;
    }

    private async Task DownloadFile(string fileName)
    {
        var response = await Http.GetAsync($"api/File/download/{fileName}");

        var fileStream = response.Content.ReadAsStream();

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
